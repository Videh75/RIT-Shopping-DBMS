{"ast":null,"code":"import classNames from 'classnames';\nimport * as React from 'react';\nimport { ENTERED, ENTERING, EXITING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport TransitionWrapper from './TransitionWrapper';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false\n};\nconst transitionStyles = {\n  [ENTERING]: 'show',\n  [ENTERED]: 'show'\n};\nconst OffcanvasToggling =\n/*#__PURE__*/\nReact.forwardRef(({\n  bsPrefix,\n  className,\n  children,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas');\n  return (\n    /*#__PURE__*/\n    _jsx(TransitionWrapper, {\n      ref: ref,\n      addEndListener: transitionEndListener,\n      ...props,\n      childRef: children.ref,\n      children: (status, innerProps) =>\n      /*#__PURE__*/\n      React.cloneElement(children, { ...innerProps,\n        className: classNames(className, children.props.className, (status === ENTERING || status === EXITING) && `${bsPrefix}-toggling`, transitionStyles[status])\n      })\n    })\n  );\n});\nOffcanvasToggling.defaultProps = defaultProps;\nOffcanvasToggling.displayName = 'OffcanvasToggling';\nexport default OffcanvasToggling;","map":{"version":3,"sources":["C:/Users/Admin/Desktop/development/frontend/node_modules/react-bootstrap/esm/OffcanvasToggling.js"],"names":["classNames","React","ENTERED","ENTERING","EXITING","transitionEndListener","TransitionWrapper","useBootstrapPrefix","jsx","_jsx","defaultProps","in","mountOnEnter","unmountOnExit","appear","transitionStyles","OffcanvasToggling","forwardRef","bsPrefix","className","children","props","ref","addEndListener","childRef","status","innerProps","cloneElement","displayName"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,OAA5B,QAA2C,mCAA3C;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,EAAE,EAAE,KADe;AAEnBC,EAAAA,YAAY,EAAE,KAFK;AAGnBC,EAAAA,aAAa,EAAE,KAHI;AAInBC,EAAAA,MAAM,EAAE;AAJW,CAArB;AAMA,MAAMC,gBAAgB,GAAG;AACvB,GAACZ,QAAD,GAAY,MADW;AAEvB,GAACD,OAAD,GAAW;AAFY,CAAzB;AAIA,MAAMc,iBAAiB;AAAG;AAAaf,KAAK,CAACgB,UAAN,CAAiB,CAAC;AACvDC,EAAAA,QADuD;AAEvDC,EAAAA,SAFuD;AAGvDC,EAAAA,QAHuD;AAIvD,KAAGC;AAJoD,CAAD,EAKrDC,GALqD,KAK7C;AACTJ,EAAAA,QAAQ,GAAGX,kBAAkB,CAACW,QAAD,EAAW,WAAX,CAA7B;AACA;AAAO;AAAaT,IAAAA,IAAI,CAACH,iBAAD,EAAoB;AAC1CgB,MAAAA,GAAG,EAAEA,GADqC;AAE1CC,MAAAA,cAAc,EAAElB,qBAF0B;AAG1C,SAAGgB,KAHuC;AAI1CG,MAAAA,QAAQ,EAAEJ,QAAQ,CAACE,GAJuB;AAK1CF,MAAAA,QAAQ,EAAE,CAACK,MAAD,EAASC,UAAT;AAAwB;AAAazB,MAAAA,KAAK,CAAC0B,YAAN,CAAmBP,QAAnB,EAA6B,EAAE,GAAGM,UAAL;AAC1EP,QAAAA,SAAS,EAAEnB,UAAU,CAACmB,SAAD,EAAYC,QAAQ,CAACC,KAAT,CAAeF,SAA3B,EAAsC,CAACM,MAAM,KAAKtB,QAAX,IAAuBsB,MAAM,KAAKrB,OAAnC,KAAgD,GAAEc,QAAS,WAAjG,EAA6GH,gBAAgB,CAACU,MAAD,CAA7H;AADqD,OAA7B;AALL,KAApB;AAAxB;AASD,CAhBsC,CAAvC;AAiBAT,iBAAiB,CAACN,YAAlB,GAAiCA,YAAjC;AACAM,iBAAiB,CAACY,WAAlB,GAAgC,mBAAhC;AACA,eAAeZ,iBAAf","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { ENTERED, ENTERING, EXITING } from 'react-transition-group/Transition';\nimport transitionEndListener from './transitionEndListener';\nimport TransitionWrapper from './TransitionWrapper';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false\n};\nconst transitionStyles = {\n  [ENTERING]: 'show',\n  [ENTERED]: 'show'\n};\nconst OffcanvasToggling = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  children,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'offcanvas');\n  return /*#__PURE__*/_jsx(TransitionWrapper, {\n    ref: ref,\n    addEndListener: transitionEndListener,\n    ...props,\n    childRef: children.ref,\n    children: (status, innerProps) => /*#__PURE__*/React.cloneElement(children, { ...innerProps,\n      className: classNames(className, children.props.className, (status === ENTERING || status === EXITING) && `${bsPrefix}-toggling`, transitionStyles[status])\n    })\n  });\n});\nOffcanvasToggling.defaultProps = defaultProps;\nOffcanvasToggling.displayName = 'OffcanvasToggling';\nexport default OffcanvasToggling;"]},"metadata":{},"sourceType":"module"}